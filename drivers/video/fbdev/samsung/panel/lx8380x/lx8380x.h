/*
 * linux/drivers/video/fbdev/exynos/panel/lx8380x/lx8380x.h
 *
 * Header file for LX8380X Dimming Driver
 *
 * Copyright (c) 2016 Samsung Electronics
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __LX8380X_H__
#define __LX8380X_H__

#include <linux/types.h>
#include <linux/kernel.h>

#include "../panel_drv.h"
#include "../panel.h"
#include "../maptbl.h"
#include "oled_function.h"
#include "oled_common_dump.h"

#define LX8380X_GAMMA_CMD_CNT 	(35)

#define LX8380X_ADDR_OFS		(0)
#define LX8380X_ADDR_LEN		(1)
#define LX8380X_DATA_OFS		(LX8380X_ADDR_OFS + LX8380X_ADDR_LEN)

#define LX8380X_MTP_REG		0xC8
#define LX8380X_MTP_OFS		0
#define LX8380X_MTP_LEN		34

#define LX8380X_CELL_ID_REG		0xA9
#define LX8380X_CELL_ID_OFS		0
#define LX8380X_CELL_ID_LEN		11

#define LX83807_CELL_ID_REG		0xA9
#define LX83807_CELL_ID_OFS		0
#define LX83807_CELL_ID_LEN		20

#define LX8380X_COORDINATE_REG	0xA9
#define LX8380X_COORDINATE_OFS	0
#define LX8380X_COORDINATE_LEN	(PANEL_COORD_LEN)

#define LX8380X_ID_DA_REG		0xDA
#define LX8380X_ID_DA_OFS		0
#define LX8380X_ID_DA_LEN		1

#define LX8380X_ID_DB_REG		0xDB
#define LX8380X_ID_DB_OFS		0
#define LX8380X_ID_DB_LEN		1

#define LX8380X_ID_DC_REG		0xDC
#define LX8380X_ID_DC_OFS		0
#define LX8380X_ID_DC_LEN		1

#define LX8380X_ID_REG		0x04
#define LX8380X_ID_OFS		0
#define LX8380X_ID_LEN		(PANEL_ID_LEN)

#define LX8380X_ELVSS_REG		0xB5
#define LX8380X_ELVSS_OFS		0
#define LX8380X_ELVSS_LEN		23

#define LX8380X_OCTA_ID_REG		0xBD
#define LX8380X_OCTA_ID_OFS		0
#define LX8380X_OCTA_ID_LEN		16

#define LX8380X_CHIP_ID_REG		0xEA
#define LX8380X_CHIP_ID_OFS		0
#define LX8380X_CHIP_ID_LEN		10

#define LX8380X_COPR_SPI_REG	0x5A
#define LX8380X_COPR_SPI_OFS	0
#define LX8380X_COPR_SPI_LEN	16

#define LX8380X_COPR_DSI_REG	0x5A
#define LX8380X_COPR_DSI_OFS	0
#define LX8380X_COPR_DSI_LEN	16

#define LX8380X_5NIT_RED_GAMMA_MTP_REG	0xB5
#define LX8380X_5NIT_RED_GAMMA_MTP_OFS	0x0C
#define LX8380X_5NIT_RED_GAMMA_MTP_LEN	2

#define LX8380X_5NIT_GREEN_GAMMA_MTP_REG	0xB5
#define LX8380X_5NIT_GREEN_GAMMA_MTP_OFS	0x32
#define LX8380X_5NIT_GREEN_GAMMA_MTP_LEN	2

#define LX8380X_5NIT_BLUE_GAMMA_MTP_REG	0xB5
#define LX8380X_5NIT_BLUE_GAMMA_MTP_OFS	0x58
#define LX8380X_5NIT_BLUE_GAMMA_MTP_LEN	2

#define LX8380X_600NIT_RED_GAMMA_MTP_REG	0xB4
#define LX8380X_600NIT_RED_GAMMA_MTP_OFS	0x06
#define LX8380X_600NIT_RED_GAMMA_MTP_LEN	2

#define LX8380X_600NIT_GREEN_GAMMA_MTP_REG	0xB4
#define LX8380X_600NIT_GREEN_GAMMA_MTP_OFS	0x2C
#define LX8380X_600NIT_GREEN_GAMMA_MTP_LEN	2

#define LX8380X_600NIT_BLUE_GAMMA_MTP_REG	0xB4
#define LX8380X_600NIT_BLUE_GAMMA_MTP_OFS	0x52
#define LX8380X_600NIT_BLUE_GAMMA_MTP_LEN	2

/* for panel dump */
#define LX8380X_RDDPM_REG		0x0A
#define LX8380X_RDDPM_OFS		0
#define LX8380X_RDDPM_LEN		1

#define LX8380X_RDDSM_REG		0x0E
#define LX8380X_RDDSM_OFS		0
#define LX8380X_RDDSM_LEN		1

#define LX8380X_DSI_ERR_REG		0x05
#define LX8380X_DSI_ERR_OFS		0
#define LX8380X_DSI_ERR_LEN		1

#define LX8380X_SELF_DIAG_REG	0x0F
#define LX8380X_SELF_DIAG_OFS	0
#define LX8380X_SELF_DIAG_LEN	1

#define LX8380X_ERROR_FLAG_REG	0x9F
#define LX8380X_ERROR_FLAG_OFS	0
#define LX8380X_ERROR_FLAG_LEN	2

#ifdef CONFIG_USDM_PANEL_MAFPC
#define LX8380X_MAFPC_REG					0x87
#define LX8380X_MAFPC_OFS					0
#define LX8380X_MAFPC_LEN					1

#define LX8380X_MAFPC_CRC_REG				0xB2
#define LX8380X_MAFPC_CRC_OFS				0
#define LX8380X_MAFPC_CRC_LEN				2

#define LX8380X_MAFPC_ENA_REG				0
#define LX8380X_MAFPC_CTRL_CMD_OFFSET		6
#define LX8380X_MAFPC_SCALE_MAX			75
#endif

enum lx8380x_function {
	LX8380X_MAPTBL_INIT_GAMMA_MODE2_BRT,
	LX8380X_MAPTBL_GETIDX_ACL_CONTROL,
	LX8380X_MAPTBL_GETIDX_TSET,
	LX8380X_DUMP_SHOW_ERROR_FLAG,
#ifdef CONFIG_USDM_PANEL_MAFPC
	LX8380X_MAPTBL_GETIDX_MAFPC_ENABLE,
	LX8380X_MAPTBL_COPY_MAFPC_ENABLE,
	LX8380X_MAPTBL_COPY_MAFPC_CTRL,
	LX8380X_MAPTBL_COPY_MAFPC_SCALE,
	LX8380X_MAPTBL_COPY_MAFPC_IMG,
#endif
	LX8380X_COND_IS_NORMAL_TO_HBM,
	LX8380X_COND_IS_MTP_VALID,
	LX8380X_COND_IS_SMOOTH_DIMMING_AVAILABLE,
	MAX_LX8380X_FUNCTION
};

extern struct pnobj_func lx8380x_function_table[MAX_LX8380X_FUNCTION];

#undef DDI_FUNC
#define DDI_FUNC(_index) (lx8380x_function_table[_index])

enum {
	GAMMA_MAPTBL,
	GAMMA_MODE2_MAPTBL,
	GAMMA_MODE2_02_MAPTBL,
	GAMMA_MODE2_13_MAPTBL,
	TSET_MAPTBL,
	ACL_CONTROL_MAPTBL,
	HBM_ACL_CONTROL_MAPTBL,
	NORMAL_ACL_ONOFF_MAPTBL,
	HBM_ACL_ONOFF_MAPTBL,
	HBM_TRANSITION_MAPTBL,
	LPM_WRDISBV_MAPTBL,
	HBM_ONOFF_MAPTBL,
	ELVSS_TEMP_MAPTBL,
	VINIT_TEMP_MAPTBL,
	VCL_TEMP_MAPTBL,
	SMOOTH_DIMMING_FRAME_MAPTBL,
#ifdef CONFIG_USDM_PANEL_MAFPC
	MAFPC_ENA_MAPTBL,
	MAFPC_CTRL_MAPTBL,
	MAFPC_SCALE_MAPTBL,
	MAFPC_IMG_MAPTBL,
#endif
	REWRITE_RED_GAMMA_5NIT_MAPTBL,
	REWRITE_GREEN_GAMMA_5NIT_MAPTBL,
	REWRITE_BLUE_GAMMA_5NIT_MAPTBL,
	REWRITE_RED_GAMMA_600NIT_MAPTBL,
	REWRITE_GREEN_GAMMA_600NIT_MAPTBL,
	REWRITE_BLUE_GAMMA_600NIT_MAPTBL,
	MAX_MAPTBL,
};

enum {
	READ_ID,
	READ_ID_DA,
	READ_ID_DB,
	READ_ID_DC,
	READ_COORDINATE,
	READ_CODE,
	READ_ELVSS,
	READ_MTP,
	READ_CELL_ID,
	READ_CSOT_CELL_ID,
	READ_OCTA_ID,
	READ_CHIP_ID,
	READ_RDDPM,
	READ_RDDSM,
	READ_DSI_ERR,
	READ_SELF_DIAG,
	READ_ERROR_FLAG,
#ifdef CONFIG_USDM_PANEL_COPR
	READ_COPR_SPI,
	READ_COPR_DSI,
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
	READ_MAFPC,
	READ_MAFPC_CRC,
#endif
	READ_RED_GAMMA_5NIT_TRY1,
	READ_GREEN_GAMMA_5NIT_TRY1,
	READ_BLUE_GAMMA_5NIT_TRY1,
	READ_RED_GAMMA_600NIT_TRY1,
	READ_GREEN_GAMMA_600NIT_TRY1,
	READ_BLUE_GAMMA_600NIT_TRY1,
	READ_RED_GAMMA_5NIT_TRY2,
	READ_GREEN_GAMMA_5NIT_TRY2,
	READ_BLUE_GAMMA_5NIT_TRY2,
	READ_RED_GAMMA_600NIT_TRY2,
	READ_GREEN_GAMMA_600NIT_TRY2,
	READ_BLUE_GAMMA_600NIT_TRY2,
	READ_RED_GAMMA_5NIT_TRY3,
	READ_GREEN_GAMMA_5NIT_TRY3,
	READ_BLUE_GAMMA_5NIT_TRY3,
	READ_RED_GAMMA_600NIT_TRY3,
	READ_GREEN_GAMMA_600NIT_TRY3,
	READ_BLUE_GAMMA_600NIT_TRY3,
};

enum {
	RES_ID,
	RES_COORDINATE,
	RES_CODE,
	RES_ELVSS,
	RES_MTP,
	RES_CELL_ID,
	RES_CSOT_CELL_ID,
	RES_OCTA_ID,
	RES_CHIP_ID,
	RES_RDDPM,
	RES_RDDSM,
	RES_DSI_ERR,
	RES_SELF_DIAG,
	RES_ERROR_FLAG,
#ifdef CONFIG_USDM_PANEL_COPR
	RES_COPR_SPI,
	RES_COPR_DSI,
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
	RES_MAFPC,
	RES_MAFPC_CRC,
#endif
	RES_RED_GAMMA_5NIT_TRY1,
	RES_GREEN_GAMMA_5NIT_TRY1,
	RES_BLUE_GAMMA_5NIT_TRY1,
	RES_RED_GAMMA_600NIT_TRY1,
	RES_GREEN_GAMMA_600NIT_TRY1,
	RES_BLUE_GAMMA_600NIT_TRY1,
	RES_RED_GAMMA_5NIT_TRY2,
	RES_GREEN_GAMMA_5NIT_TRY2,
	RES_BLUE_GAMMA_5NIT_TRY2,
	RES_RED_GAMMA_600NIT_TRY2,
	RES_GREEN_GAMMA_600NIT_TRY2,
	RES_BLUE_GAMMA_600NIT_TRY2,
	RES_RED_GAMMA_5NIT_TRY3,
	RES_GREEN_GAMMA_5NIT_TRY3,
	RES_BLUE_GAMMA_5NIT_TRY3,
	RES_RED_GAMMA_600NIT_TRY3,
	RES_GREEN_GAMMA_600NIT_TRY3,
	RES_BLUE_GAMMA_600NIT_TRY3,
};

static u8 LX8380X_ID[LX8380X_ID_LEN];
static u8 LX8380X_COORDINATE[LX8380X_COORDINATE_LEN];
static u8 LX8380X_ELVSS[LX8380X_ELVSS_LEN];
static u8 LX8380X_MTP[LX8380X_MTP_LEN];
static u8 LX8380X_CELL_ID[LX8380X_CELL_ID_LEN];
static u8 LX83807_CELL_ID[LX83807_CELL_ID_LEN];
static u8 LX8380X_OCTA_ID[LX8380X_OCTA_ID_LEN];
static u8 LX8380X_CHIP_ID[LX8380X_CHIP_ID_LEN];
static u8 LX8380X_RDDPM[LX8380X_RDDPM_LEN];
static u8 LX8380X_RDDSM[LX8380X_RDDSM_LEN];
static u8 LX8380X_DSI_ERR[LX8380X_DSI_ERR_LEN];
static u8 LX8380X_SELF_DIAG[LX8380X_SELF_DIAG_LEN];
static u8 LX8380X_ERROR_FLAG[LX8380X_ERROR_FLAG_LEN];
#ifdef CONFIG_USDM_PANEL_COPR
static u8 LX8380X_COPR_SPI[LX8380X_COPR_SPI_LEN];
static u8 LX8380X_COPR_DSI[LX8380X_COPR_DSI_LEN];
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
static u8 LX8380X_MAFPC[LX8380X_MAFPC_LEN];
static u8 LX8380X_MAFPC_CRC[LX8380X_MAFPC_CRC_LEN];
#endif
static u8 LX8380X_RED_GAMMA_5NIT_TRY1[LX8380X_5NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_5NIT_TRY1[LX8380X_5NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_5NIT_TRY1[LX8380X_5NIT_BLUE_GAMMA_MTP_LEN];
static u8 LX8380X_RED_GAMMA_600NIT_TRY1[LX8380X_600NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_600NIT_TRY1[LX8380X_600NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_600NIT_TRY1[LX8380X_600NIT_BLUE_GAMMA_MTP_LEN];

static u8 LX8380X_RED_GAMMA_5NIT_TRY2[LX8380X_5NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_5NIT_TRY2[LX8380X_5NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_5NIT_TRY2[LX8380X_5NIT_BLUE_GAMMA_MTP_LEN];
static u8 LX8380X_RED_GAMMA_600NIT_TRY2[LX8380X_600NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_600NIT_TRY2[LX8380X_600NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_600NIT_TRY2[LX8380X_600NIT_BLUE_GAMMA_MTP_LEN];

static u8 LX8380X_RED_GAMMA_5NIT_TRY3[LX8380X_5NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_5NIT_TRY3[LX8380X_5NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_5NIT_TRY3[LX8380X_5NIT_BLUE_GAMMA_MTP_LEN];
static u8 LX8380X_RED_GAMMA_600NIT_TRY3[LX8380X_600NIT_RED_GAMMA_MTP_LEN];
static u8 LX8380X_GREEN_GAMMA_600NIT_TRY3[LX8380X_600NIT_GREEN_GAMMA_MTP_LEN];
static u8 LX8380X_BLUE_GAMMA_600NIT_TRY3[LX8380X_600NIT_BLUE_GAMMA_MTP_LEN];

static struct rdinfo lx8380x_rditbl[] = {
//	[READ_ID] = RDINFO_INIT(id, DSI_PKT_TYPE_RD, LX8380X_ID_REG, LX8380X_ID_OFS, LX8380X_ID_LEN),
	[READ_ID_DA] = RDINFO_INIT(id_da, DSI_PKT_TYPE_RD, LX8380X_ID_DA_REG, LX8380X_ID_DA_OFS, LX8380X_ID_DA_LEN),
	[READ_ID_DB] = RDINFO_INIT(id_db, DSI_PKT_TYPE_RD, LX8380X_ID_DB_REG, LX8380X_ID_DB_OFS, LX8380X_ID_DB_LEN),
	[READ_ID_DC] = RDINFO_INIT(id_dc, DSI_PKT_TYPE_RD, LX8380X_ID_DC_REG, LX8380X_ID_DC_OFS, LX8380X_ID_DC_LEN),
	[READ_COORDINATE] = RDINFO_INIT(coordinate, DSI_PKT_TYPE_RD, LX8380X_COORDINATE_REG, LX8380X_COORDINATE_OFS, LX8380X_COORDINATE_LEN),
	[READ_ELVSS] = RDINFO_INIT(elvss, DSI_PKT_TYPE_RD, LX8380X_ELVSS_REG, LX8380X_ELVSS_OFS, LX8380X_ELVSS_LEN),
	[READ_MTP] = RDINFO_INIT(mtp, DSI_PKT_TYPE_RD, LX8380X_MTP_REG, LX8380X_MTP_OFS, LX8380X_MTP_LEN),
	[READ_CELL_ID] = RDINFO_INIT(cell_id, DSI_PKT_TYPE_RD, LX8380X_CELL_ID_REG, LX8380X_CELL_ID_OFS, LX8380X_CELL_ID_LEN),
	[READ_CSOT_CELL_ID] = RDINFO_INIT(csot_cell_id, DSI_PKT_TYPE_RD, LX83807_CELL_ID_REG, LX83807_CELL_ID_OFS, LX83807_CELL_ID_LEN),
	[READ_OCTA_ID] = RDINFO_INIT(octa_id, DSI_PKT_TYPE_RD, LX8380X_OCTA_ID_REG, LX8380X_OCTA_ID_OFS, LX8380X_OCTA_ID_LEN),
	[READ_CHIP_ID] = RDINFO_INIT(chip_id, DSI_PKT_TYPE_RD, LX8380X_CHIP_ID_REG, LX8380X_CHIP_ID_OFS, LX8380X_CHIP_ID_LEN),
	[READ_RDDPM] = RDINFO_INIT(rddpm, DSI_PKT_TYPE_RD, LX8380X_RDDPM_REG, LX8380X_RDDPM_OFS, LX8380X_RDDPM_LEN),
	[READ_RDDSM] = RDINFO_INIT(rddsm, DSI_PKT_TYPE_RD, LX8380X_RDDSM_REG, LX8380X_RDDSM_OFS, LX8380X_RDDSM_LEN),
	[READ_DSI_ERR] = RDINFO_INIT(dsi_err, DSI_PKT_TYPE_RD, LX8380X_DSI_ERR_REG, LX8380X_DSI_ERR_OFS, LX8380X_DSI_ERR_LEN),
	[READ_SELF_DIAG] = RDINFO_INIT(self_diag, DSI_PKT_TYPE_RD, LX8380X_SELF_DIAG_REG, LX8380X_SELF_DIAG_OFS, LX8380X_SELF_DIAG_LEN),
	[READ_ERROR_FLAG] = RDINFO_INIT(error_flag, DSI_PKT_TYPE_RD, LX8380X_ERROR_FLAG_REG, LX8380X_ERROR_FLAG_OFS, LX8380X_ERROR_FLAG_LEN),
#ifdef CONFIG_USDM_PANEL_COPR
	[READ_COPR_SPI] = RDINFO_INIT(copr_spi, SPI_PKT_TYPE_RD, LX8380X_COPR_SPI_REG, LX8380X_COPR_SPI_OFS, LX8380X_COPR_SPI_LEN),
	[READ_COPR_DSI] = RDINFO_INIT(copr_dsi, DSI_PKT_TYPE_RD, LX8380X_COPR_DSI_REG, LX8380X_COPR_DSI_OFS, LX8380X_COPR_DSI_LEN),
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
	[READ_MAFPC] = RDINFO_INIT(mafpc, DSI_PKT_TYPE_RD, LX8380X_MAFPC_REG, LX8380X_MAFPC_OFS, LX8380X_MAFPC_LEN),
	[READ_MAFPC_CRC] = RDINFO_INIT(mafpc_crc, DSI_PKT_TYPE_RD, LX8380X_MAFPC_CRC_REG, LX8380X_MAFPC_CRC_OFS, LX8380X_MAFPC_CRC_LEN),
#endif
	// mtp read 3times
	[READ_RED_GAMMA_5NIT_TRY1] = RDINFO_INIT(red_gamma_5nit_try1, DSI_PKT_TYPE_RD, LX8380X_5NIT_RED_GAMMA_MTP_REG, LX8380X_5NIT_RED_GAMMA_MTP_OFS, LX8380X_5NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_5NIT_TRY1] = RDINFO_INIT(green_gamma_5nit_try1, DSI_PKT_TYPE_RD, LX8380X_5NIT_GREEN_GAMMA_MTP_REG, LX8380X_5NIT_GREEN_GAMMA_MTP_OFS, LX8380X_5NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_5NIT_TRY1] = RDINFO_INIT(blue_gamma_5nit_try1, DSI_PKT_TYPE_RD, LX8380X_5NIT_BLUE_GAMMA_MTP_REG, LX8380X_5NIT_BLUE_GAMMA_MTP_OFS, LX8380X_5NIT_BLUE_GAMMA_MTP_LEN),
	[READ_RED_GAMMA_600NIT_TRY1] = RDINFO_INIT(red_gamma_600nit_try1, DSI_PKT_TYPE_RD, LX8380X_600NIT_RED_GAMMA_MTP_REG, LX8380X_600NIT_RED_GAMMA_MTP_OFS, LX8380X_600NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_600NIT_TRY1] = RDINFO_INIT(green_gamma_600nit_try1, DSI_PKT_TYPE_RD, LX8380X_600NIT_GREEN_GAMMA_MTP_REG, LX8380X_600NIT_GREEN_GAMMA_MTP_OFS, LX8380X_600NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_600NIT_TRY1] = RDINFO_INIT(blue_gamma_600nit_try1, DSI_PKT_TYPE_RD, LX8380X_600NIT_BLUE_GAMMA_MTP_REG, LX8380X_600NIT_BLUE_GAMMA_MTP_OFS, LX8380X_600NIT_BLUE_GAMMA_MTP_LEN),
	[READ_RED_GAMMA_5NIT_TRY2] = RDINFO_INIT(red_gamma_5nit_try2, DSI_PKT_TYPE_RD, LX8380X_5NIT_RED_GAMMA_MTP_REG, LX8380X_5NIT_RED_GAMMA_MTP_OFS, LX8380X_5NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_5NIT_TRY2] = RDINFO_INIT(green_gamma_5nit_try2, DSI_PKT_TYPE_RD, LX8380X_5NIT_GREEN_GAMMA_MTP_REG, LX8380X_5NIT_GREEN_GAMMA_MTP_OFS, LX8380X_5NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_5NIT_TRY2] = RDINFO_INIT(blue_gamma_5nit_try2, DSI_PKT_TYPE_RD, LX8380X_5NIT_BLUE_GAMMA_MTP_REG, LX8380X_5NIT_BLUE_GAMMA_MTP_OFS, LX8380X_5NIT_BLUE_GAMMA_MTP_LEN),
	[READ_RED_GAMMA_600NIT_TRY2] = RDINFO_INIT(red_gamma_600nit_try2, DSI_PKT_TYPE_RD, LX8380X_600NIT_RED_GAMMA_MTP_REG, LX8380X_600NIT_RED_GAMMA_MTP_OFS, LX8380X_600NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_600NIT_TRY2] = RDINFO_INIT(green_gamma_600nit_try2, DSI_PKT_TYPE_RD, LX8380X_600NIT_GREEN_GAMMA_MTP_REG, LX8380X_600NIT_GREEN_GAMMA_MTP_OFS, LX8380X_600NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_600NIT_TRY2] = RDINFO_INIT(blue_gamma_600nit_try2, DSI_PKT_TYPE_RD, LX8380X_600NIT_BLUE_GAMMA_MTP_REG, LX8380X_600NIT_BLUE_GAMMA_MTP_OFS, LX8380X_600NIT_BLUE_GAMMA_MTP_LEN),
	[READ_RED_GAMMA_5NIT_TRY3] = RDINFO_INIT(red_gamma_5nit_try3, DSI_PKT_TYPE_RD, LX8380X_5NIT_RED_GAMMA_MTP_REG, LX8380X_5NIT_RED_GAMMA_MTP_OFS, LX8380X_5NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_5NIT_TRY3] = RDINFO_INIT(green_gamma_5nit_try3, DSI_PKT_TYPE_RD, LX8380X_5NIT_GREEN_GAMMA_MTP_REG, LX8380X_5NIT_GREEN_GAMMA_MTP_OFS, LX8380X_5NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_5NIT_TRY3] = RDINFO_INIT(blue_gamma_5nit_try3, DSI_PKT_TYPE_RD, LX8380X_5NIT_BLUE_GAMMA_MTP_REG, LX8380X_5NIT_BLUE_GAMMA_MTP_OFS, LX8380X_5NIT_BLUE_GAMMA_MTP_LEN),
	[READ_RED_GAMMA_600NIT_TRY3] = RDINFO_INIT(red_gamma_600nit_try3, DSI_PKT_TYPE_RD, LX8380X_600NIT_RED_GAMMA_MTP_REG, LX8380X_600NIT_RED_GAMMA_MTP_OFS, LX8380X_600NIT_RED_GAMMA_MTP_LEN),
	[READ_GREEN_GAMMA_600NIT_TRY3] = RDINFO_INIT(green_gamma_600nit_try3, DSI_PKT_TYPE_RD, LX8380X_600NIT_GREEN_GAMMA_MTP_REG, LX8380X_600NIT_GREEN_GAMMA_MTP_OFS, LX8380X_600NIT_GREEN_GAMMA_MTP_LEN),
	[READ_BLUE_GAMMA_600NIT_TRY3] = RDINFO_INIT(blue_gamma_600nit_try3, DSI_PKT_TYPE_RD, LX8380X_600NIT_BLUE_GAMMA_MTP_REG, LX8380X_600NIT_BLUE_GAMMA_MTP_OFS, LX8380X_600NIT_BLUE_GAMMA_MTP_LEN),

};

static DECLARE_RESUI(id) = {
	{.rditbl = &lx8380x_rditbl[READ_ID_DA], .offset = 0},
	{.rditbl = &lx8380x_rditbl[READ_ID_DB], .offset = 1},
	{.rditbl = &lx8380x_rditbl[READ_ID_DC], .offset = 2},
};

static DEFINE_RESUI(coordinate, &lx8380x_rditbl[READ_COORDINATE], 0);
static DEFINE_RESUI(elvss, &lx8380x_rditbl[READ_ELVSS], 0);
static DEFINE_RESUI(mtp, &lx8380x_rditbl[READ_MTP], 0);
static DEFINE_RESUI(cell_id, &lx8380x_rditbl[READ_CELL_ID], 0);
static DEFINE_RESUI(csot_cell_id, &lx8380x_rditbl[READ_CSOT_CELL_ID], 0);
static DEFINE_RESUI(octa_id, &lx8380x_rditbl[READ_OCTA_ID], 0);
static DEFINE_RESUI(chip_id, &lx8380x_rditbl[READ_CHIP_ID], 0);
static DEFINE_RESUI(rddpm, &lx8380x_rditbl[READ_RDDPM], 0);
static DEFINE_RESUI(rddsm, &lx8380x_rditbl[READ_RDDSM], 0);
static DEFINE_RESUI(dsi_err, &lx8380x_rditbl[READ_DSI_ERR], 0);
static DEFINE_RESUI(self_diag, &lx8380x_rditbl[READ_SELF_DIAG], 0);
static DEFINE_RESUI(error_flag, &lx8380x_rditbl[READ_ERROR_FLAG], 0);
#ifdef CONFIG_USDM_PANEL_COPR
static DEFINE_RESUI(copr_spi, &lx8380x_rditbl[READ_COPR_SPI], 0);
static DEFINE_RESUI(copr_dsi, &lx8380x_rditbl[READ_COPR_DSI], 0);
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
static DEFINE_RESUI(mafpc, &lx8380x_rditbl[READ_MAFPC], 0);
static DEFINE_RESUI(mafpc_crc, &lx8380x_rditbl[READ_MAFPC_CRC], 0);
#endif
static DEFINE_RESUI(red_gamma_5nit_try1, &lx8380x_rditbl[READ_RED_GAMMA_5NIT_TRY1], 0);
static DEFINE_RESUI(green_gamma_5nit_try1, &lx8380x_rditbl[READ_GREEN_GAMMA_5NIT_TRY1], 0);
static DEFINE_RESUI(blue_gamma_5nit_try1, &lx8380x_rditbl[READ_BLUE_GAMMA_5NIT_TRY1], 0);
static DEFINE_RESUI(red_gamma_600nit_try1, &lx8380x_rditbl[READ_RED_GAMMA_600NIT_TRY1], 0);
static DEFINE_RESUI(green_gamma_600nit_try1, &lx8380x_rditbl[READ_GREEN_GAMMA_600NIT_TRY1], 0);
static DEFINE_RESUI(blue_gamma_600nit_try1, &lx8380x_rditbl[READ_BLUE_GAMMA_600NIT_TRY1], 0);
static DEFINE_RESUI(red_gamma_5nit_try2, &lx8380x_rditbl[READ_RED_GAMMA_5NIT_TRY2], 0);
static DEFINE_RESUI(green_gamma_5nit_try2, &lx8380x_rditbl[READ_GREEN_GAMMA_5NIT_TRY2], 0);
static DEFINE_RESUI(blue_gamma_5nit_try2, &lx8380x_rditbl[READ_BLUE_GAMMA_5NIT_TRY2], 0);
static DEFINE_RESUI(red_gamma_600nit_try2, &lx8380x_rditbl[READ_RED_GAMMA_600NIT_TRY2], 0);
static DEFINE_RESUI(green_gamma_600nit_try2, &lx8380x_rditbl[READ_GREEN_GAMMA_600NIT_TRY2], 0);
static DEFINE_RESUI(blue_gamma_600nit_try2, &lx8380x_rditbl[READ_BLUE_GAMMA_600NIT_TRY2], 0);
static DEFINE_RESUI(red_gamma_5nit_try3, &lx8380x_rditbl[READ_RED_GAMMA_5NIT_TRY3], 0);
static DEFINE_RESUI(green_gamma_5nit_try3, &lx8380x_rditbl[READ_GREEN_GAMMA_5NIT_TRY3], 0);
static DEFINE_RESUI(blue_gamma_5nit_try3, &lx8380x_rditbl[READ_BLUE_GAMMA_5NIT_TRY3], 0);
static DEFINE_RESUI(red_gamma_600nit_try3, &lx8380x_rditbl[READ_RED_GAMMA_600NIT_TRY3], 0);
static DEFINE_RESUI(green_gamma_600nit_try3, &lx8380x_rditbl[READ_GREEN_GAMMA_600NIT_TRY3], 0);
static DEFINE_RESUI(blue_gamma_600nit_try3, &lx8380x_rditbl[READ_BLUE_GAMMA_600NIT_TRY3], 0);

static struct resinfo lx8380x_restbl[] = {
	[RES_ID] = RESINFO_INIT(id, LX8380X_ID, RESUI(id)),
	[RES_COORDINATE] = RESINFO_INIT(coordinate, LX8380X_COORDINATE, RESUI(coordinate)),
	[RES_ELVSS] = RESINFO_INIT(elvss, LX8380X_ELVSS, RESUI(elvss)),
	[RES_MTP] = RESINFO_INIT(mtp, LX8380X_MTP, RESUI(mtp)),
	[RES_CELL_ID] = RESINFO_INIT(cell_id, LX8380X_CELL_ID, RESUI(cell_id)),
	[RES_CSOT_CELL_ID] = RESINFO_INIT(csot_cell_id, LX83807_CELL_ID, RESUI(csot_cell_id)),
	[RES_OCTA_ID] = RESINFO_INIT(octa_id, LX8380X_OCTA_ID, RESUI(octa_id)),
	[RES_CHIP_ID] = RESINFO_INIT(chip_id, LX8380X_CHIP_ID, RESUI(chip_id)),
	[RES_RDDPM] = RESINFO_INIT(rddpm, LX8380X_RDDPM, RESUI(rddpm)),
	[RES_RDDSM] = RESINFO_INIT(rddsm, LX8380X_RDDSM, RESUI(rddsm)),
	[RES_DSI_ERR] = RESINFO_INIT(dsi_err, LX8380X_DSI_ERR, RESUI(dsi_err)),
	[RES_SELF_DIAG] = RESINFO_INIT(self_diag, LX8380X_SELF_DIAG, RESUI(self_diag)),
	[RES_ERROR_FLAG] = RESINFO_INIT(error_flag, LX8380X_ERROR_FLAG, RESUI(error_flag)),
#ifdef CONFIG_USDM_PANEL_COPR
	[RES_COPR_SPI] = RESINFO_INIT(copr_spi, LX8380X_COPR_SPI, RESUI(copr_spi)),
	[RES_COPR_DSI] = RESINFO_INIT(copr_dsi, LX8380X_COPR_DSI, RESUI(copr_dsi)),
#endif
#ifdef CONFIG_USDM_PANEL_MAFPC
	[RES_MAFPC] = RESINFO_INIT(mafpc, LX8380X_MAFPC, RESUI(mafpc)),
	[RES_MAFPC_CRC] = RESINFO_INIT(mafpc_crc, LX8380X_MAFPC_CRC, RESUI(mafpc_crc)),
#endif
	[RES_RED_GAMMA_5NIT_TRY1] = RESINFO_INIT(red_gamma_5nit_try1, LX8380X_RED_GAMMA_5NIT_TRY1, RESUI(red_gamma_5nit_try1)),
	[RES_GREEN_GAMMA_5NIT_TRY1] = RESINFO_INIT(green_gamma_5nit_try1, LX8380X_GREEN_GAMMA_5NIT_TRY1, RESUI(green_gamma_5nit_try1)),
	[RES_BLUE_GAMMA_5NIT_TRY1] = RESINFO_INIT(blue_gamma_5nit_try1, LX8380X_BLUE_GAMMA_5NIT_TRY1, RESUI(blue_gamma_5nit_try1)),
	[RES_RED_GAMMA_600NIT_TRY1] = RESINFO_INIT(red_gamma_600nit_try1, LX8380X_RED_GAMMA_600NIT_TRY1, RESUI(red_gamma_600nit_try1)),
	[RES_GREEN_GAMMA_600NIT_TRY1] = RESINFO_INIT(green_gamma_600nit_try1, LX8380X_GREEN_GAMMA_600NIT_TRY1, RESUI(green_gamma_600nit_try1)),
	[RES_BLUE_GAMMA_600NIT_TRY1] = RESINFO_INIT(blue_gamma_600nit_try1, LX8380X_BLUE_GAMMA_600NIT_TRY1, RESUI(blue_gamma_600nit_try1)),
	[RES_RED_GAMMA_5NIT_TRY2] = RESINFO_INIT(red_gamma_5nit_try2, LX8380X_RED_GAMMA_5NIT_TRY2, RESUI(red_gamma_5nit_try2)),
	[RES_GREEN_GAMMA_5NIT_TRY2] = RESINFO_INIT(green_gamma_5nit_try2, LX8380X_GREEN_GAMMA_5NIT_TRY2, RESUI(green_gamma_5nit_try2)),
	[RES_BLUE_GAMMA_5NIT_TRY2] = RESINFO_INIT(blue_gamma_5nit_try2, LX8380X_BLUE_GAMMA_5NIT_TRY2, RESUI(blue_gamma_5nit_try2)),
	[RES_RED_GAMMA_600NIT_TRY2] = RESINFO_INIT(red_gamma_600nit_try2, LX8380X_RED_GAMMA_600NIT_TRY2, RESUI(red_gamma_600nit_try2)),
	[RES_GREEN_GAMMA_600NIT_TRY2] = RESINFO_INIT(green_gamma_600nit_try2, LX8380X_GREEN_GAMMA_600NIT_TRY2, RESUI(green_gamma_600nit_try2)),
	[RES_BLUE_GAMMA_600NIT_TRY2] = RESINFO_INIT(blue_gamma_600nit_try2, LX8380X_BLUE_GAMMA_600NIT_TRY2, RESUI(blue_gamma_600nit_try2)),
	[RES_RED_GAMMA_5NIT_TRY3] = RESINFO_INIT(red_gamma_5nit_try3, LX8380X_RED_GAMMA_5NIT_TRY3, RESUI(red_gamma_5nit_try3)),
	[RES_GREEN_GAMMA_5NIT_TRY3] = RESINFO_INIT(green_gamma_5nit_try3, LX8380X_GREEN_GAMMA_5NIT_TRY3, RESUI(green_gamma_5nit_try3)),
	[RES_BLUE_GAMMA_5NIT_TRY3] = RESINFO_INIT(blue_gamma_5nit_try3, LX8380X_BLUE_GAMMA_5NIT_TRY3, RESUI(blue_gamma_5nit_try3)),
	[RES_RED_GAMMA_600NIT_TRY3] = RESINFO_INIT(red_gamma_600nit_try3, LX8380X_RED_GAMMA_600NIT_TRY3, RESUI(red_gamma_600nit_try3)),
	[RES_GREEN_GAMMA_600NIT_TRY3] = RESINFO_INIT(green_gamma_600nit_try3, LX8380X_GREEN_GAMMA_600NIT_TRY3, RESUI(green_gamma_600nit_try3)),
	[RES_BLUE_GAMMA_600NIT_TRY3] = RESINFO_INIT(blue_gamma_600nit_try3, LX8380X_BLUE_GAMMA_600NIT_TRY3, RESUI(blue_gamma_600nit_try3)),
};

enum {
	DUMP_RDDPM = 0,
	DUMP_RDDPM_SLEEP_IN,
	DUMP_RDDSM,
	DUMP_DSI_ERR,
	DUMP_SELF_DIAG,
	DUMP_ERROR_FLAG,
#ifdef CONFIG_USDM_PANEL_MAFPC
	DUMP_MAFPC,
#endif
};

static struct dump_expect rddpm_after_display_on_expects[] = {
	{ .offset = 0, .mask = 0x80, .value = 0x80, .msg = "Booster Mode : OFF(NG)" },
	{ .offset = 0, .mask = 0x40, .value = 0x00, .msg = "Idle Mode : ON(NG)" },
	{ .offset = 0, .mask = 0x10, .value = 0x10, .msg = "Sleep Mode : IN(NG)" },
	{ .offset = 0, .mask = 0x08, .value = 0x08, .msg = "Normal Mode : SLEEP(NG)" },
	{ .offset = 0, .mask = 0x04, .value = 0x04, .msg = "Display Mode : OFF(NG)" },
};

static struct dump_expect rddpm_before_sleep_in_expects[] = {
	{ .offset = 0, .mask = 0x80, .value = 0x80, .msg = "Booster Mode : OFF(NG)" },
	{ .offset = 0, .mask = 0x40, .value = 0x00, .msg = "Idle Mode : ON(NG)" },
	{ .offset = 0, .mask = 0x10, .value = 0x10, .msg = "Sleep Mode : IN(NG)" },
	{ .offset = 0, .mask = 0x08, .value = 0x08, .msg = "Normal Mode : SLEEP(NG)" },
	{ .offset = 0, .mask = 0x04, .value = 0x00, .msg = "Display Mode : ON(NG)" },
};

static struct dump_expect rddsm_expects[] = {
	{ .offset = 0, .mask = 0xFF, .value = 0x80, .msg = "TE Mode : OFF(NG)" },
};

static struct dump_expect dsie_cnt_expects[] = {
	{ .offset = 0, .mask = 0xFF, .value = 0x00, .msg = "DSI Error Count" },
};

static struct dump_expect self_diag_expects[] = {
	{ .offset = 0, .mask = 0x40, .value = 0x40, .msg = "Panel Boosting Error" },
};

static struct dump_expect error_flag_expects[] = {
	{ .offset = 0, .mask = 0x08, .value = 0x00, .msg = "Power Sequence Error" },
	{ .offset = 0, .mask = 0x04, .value = 0x00, .msg = "Input Level Error" },
	{ .offset = 0, .mask = 0x02, .value = 0x00, .msg = "VGH Level Error" },
	{ .offset = 0, .mask = 0x01, .value = 0x00, .msg = "UCS Checksum Error" },
	{ .offset = 1, .mask = 0x01, .value = 0x00, .msg = "CCD output value" },
};

#ifdef CONFIG_USDM_PANEL_MAFPC
static struct dump_expect mafpc_en_expects[] = {
	{ .offset = 0, .mask = 0x01, .value = 0x01, .msg = "mAFPC Disabled" },
};
#endif

static struct dumpinfo lx8380x_dmptbl[] = {
	[DUMP_RDDPM] = DUMPINFO_INIT_V2(rddpm, &lx8380x_restbl[RES_RDDPM], &OLED_FUNC(OLED_DUMP_SHOW_RDDPM), rddpm_after_display_on_expects),
	[DUMP_RDDPM_SLEEP_IN] = DUMPINFO_INIT_V2(rddpm_sleep_in, &lx8380x_restbl[RES_RDDPM], &OLED_FUNC(OLED_DUMP_SHOW_RDDPM_BEFORE_SLEEP_IN), rddpm_before_sleep_in_expects),
	[DUMP_RDDSM] = DUMPINFO_INIT_V2(rddsm, &lx8380x_restbl[RES_RDDSM], &OLED_FUNC(OLED_DUMP_SHOW_RDDSM), rddsm_expects),
	[DUMP_DSI_ERR] = DUMPINFO_INIT_V2(dsi_err, &lx8380x_restbl[RES_DSI_ERR], &OLED_FUNC(OLED_DUMP_SHOW_DSI_ERR), dsie_cnt_expects),
	[DUMP_SELF_DIAG] = DUMPINFO_INIT_V2(self_diag, &lx8380x_restbl[RES_SELF_DIAG], &OLED_FUNC(OLED_DUMP_SHOW_SELF_DIAG), self_diag_expects),
	[DUMP_ERROR_FLAG] = DUMPINFO_INIT_V2(error_flag, &lx8380x_restbl[RES_ERROR_FLAG], &DDI_FUNC(LX8380X_DUMP_SHOW_ERROR_FLAG), error_flag_expects),
#ifdef CONFIG_USDM_PANEL_MAFPC
	[DUMP_MAFPC] = DUMPINFO_INIT_V2(mafpc, &lx8380x_restbl[RES_MAFPC], &OLED_FUNC(OLED_DUMP_SHOW_MAFPC_LOG), mafpc_en_expects),
#endif
};

/* Variable Refresh Rate */
enum {
	LX8380X_VRR_MODE_NS,
	LX8380X_VRR_MODE_HS,
	MAX_LX8380X_VRR_MODE,
};

enum {
	LX8380X_VRR_60HS,
	LX8380X_VRR_30NS,
	MAX_LX8380X_VRR,
};

enum {
	LX8380X_RESOL_432x432,
};

enum {
	LX8380X_RESOL_480x480,
};

enum {
	LX8380X_SMALL_DISPLAY_MODE_432x432_60HS,
	LX8380X_SMALL_DISPLAY_MODE_432x432_30NS,
	MAX_LX8380X_SMALL_DISPLAY_MODE,
};

enum {
	LX8380X_LARGE_DISPLAY_MODE_480x480_60HS,
	LX8380X_LARGE_DISPLAY_MODE_480x480_30NS,	
	MAX_LX8380X_LARGE_DISPLAY_MODE,
};

enum {
	LX8380X_VRR_KEY_REFRESH_RATE,
	LX8380X_VRR_KEY_REFRESH_MODE,
	LX8380X_VRR_KEY_TE_SW_SKIP_COUNT,
	LX8380X_VRR_KEY_TE_HW_SKIP_COUNT,
	MAX_LX8380X_VRR_KEY,
};

enum {
	LX8380X_ACL_RATIO_0,
	LX8380X_ACL_RATIO_8,
	LX8380X_ACL_RATIO_15,
	MAX_LX8380X_ACL_RATIO,
};

enum {
	LX8380X_MTP_VALUE_IS_NOT_YET,			//  not yet
	LX8380X_MTP_VALUE_IS_VALID,				//	valid
	LX8380X_MTP_VALUE_IS_MISMATCH,			//	3times readed value is not mathced
	MAX_LX8380X_MTP_VALUE,
};

enum {
	LX8380X_SMOOTH_DIMMING_8FRAME,
	LX8380X_SMOOTH_DIMMING_32FRAME,
	MAX_LX8380X_SMOOTH_DIMMING,
};

enum {
	GE_TEMP_1,
	EQ_TEMP_0,
	LE_TEMP_MINUS1,
	LE_TEMP_MINUS15,
	MAX_TEMP,
};
int lx8380x_dump_show_err_fg(struct dumpinfo *dump);
int lx83805_get_cell_id(struct panel_device *panel, void *buf);
int lx83805_get_manufacture_date(struct panel_device *panel, void *buf);
int lx83806_get_cell_id(struct panel_device *panel, void *buf);
int lx83807_get_cell_id(struct panel_device *panel, void *buf);
int lx83807_get_manufacture_date(struct panel_device *panel, void *buf);
int lx83805_get_octa_id(struct panel_device *panel, void *buf);
int lx83806_get_octa_id(struct panel_device *panel, void *buf);
int lx83806_get_manufacture_date(struct panel_device *panel, void *buf);
int lx8380x_get_manufacture_code(struct panel_device *panel, void *buf);
int lx8380x_init(void);

#endif /* __LX8380X_H__ */
